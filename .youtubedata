from googleapiclient.discovery import build
import pymongo
import psycopg2
import pandas as pd
import streamlit as st

#API key connection

def Api_connect():
    Api_Id="AIzaSyDmDEqwOHeknYtHukqSLzrN4ZQIX4JI69s"

    api_service_name="youtube"
    api_version="v3"

    youtube=build(api_service_name,api_version,developerKey=Api_Id)

    return youtube

youtube=Api_connect()


#get channels information
def get_channel_info(channel_id):
    request=youtube.channels().list(
        part="snippet,ContentDetails, statistics",
        id=channel_id
    )
    response=request.execute()

    for i in response['items']:
        data=dict(Channel_Name=i["snippet"]["title"],
                Channel_Id=i["id"],
                Subscribers=i["statistics"]["subscriberCount"],
                Views=i["statistics"]["viewCount"],
                Total_Videos=i["statistics"]["videoCount"],
                Channel_Description=i["snippet"]["description"],
                Playlist_Id=i["contentDetails"]["relatedPlaylists"]["uploads"])
    return data


#get video ids
def get_video_ids(channel_id):
    video_ids=[]
    response=youtube.channels().list(id=channel_id,
                                part='contentDetails').execute()
    Playlist_Id=response['items'][0]['contentDetails']['relatedPlaylists']['uploads']
    next_page_token=None

    while True:
        response1=youtube.playlistItems().list(
                                    part='snippet',
                                    playlistId=Playlist_Id,
                                    maxResults=50,
                                    pageToken=next_page_token).execute()
        for i in range(len(response1['items'])):
            video_ids.append(response1['items'][i]['snippet']['resourceId']['videoId']) 
        next_page_token=response1.get('nextPageToken')

        if next_page_token is None:
            break
    return video_ids


#get video information
def get_video_info(video_ids):
    video_data=[]
    for video_id in video_ids:
        request=youtube.videos().list(
            part="snippet,ContentDetails,statistics",
            id=video_id
        )
        response=request.execute()

        for item in response['items']:
            data=dict(Channel_Name=item['snippet']['channelTitle'],
                    Channel_Id=item['snippet']['channelId'],
                    Video_Id=item['id'],
                    Title=item['snippet']['title'],
                    Tags=item['snippet'].get('tags'),
                    Thumbnail=item['snippet']['thumbnails']['default']['url'],
                    Description=item['snippet'].get('description'),
                    Published_date=item['snippet']['publishedAt'],
                    Duration=item['contentDetails']['duration'],
                    Views=item['statistics'].get('viewCount'),
                    Likes=item['statistics'].get('likeCount'),
                    Comments=item['statistics'].get('commentCount'),
                    Favourite_Count=item['statistics']['favoriteCount'],
                    Definition=item['contentDetails']['definition'],
                    Caption_status=item['contentDetails']['caption']
                    )
            video_data.append(data)
    return video_data


#get comment information
def get_comment_info(video_details):
    Comment_data=[]
    try:
        for video_id in video_details:
            request=youtube.commentThreads().list(
                part="snippet",
                videoId=video_id,
                maxResults=50
                )
            response=request.execute()

            for item in response['items']:
                data=dict(Comment_Id=item['snippet']['topLevelComment']['id'],
                    Video_Id=item['snippet']['topLevelComment']['snippet']['videoId'],
                    Comment_Text=item['snippet']['topLevelComment']['snippet']['textDisplay'],
                    Comment_Author=item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                    Comment_Published=item['snippet']['topLevelComment']['snippet']['publishedAt'])
            
            Comment_data.append(data)
    except:
        pass
    return Comment_data


#get playlist details
def get_playlist_details(channel_id):

    next_page_Token=None
    All_data=[]
    while True:
        request=youtube.playlists().list(
            part='snippet,contentDetails',
            channelId=channel_id,
            maxResults=50,
            pageToken=next_page_Token
        )
        response=request.execute()

        for item in response['items']:
            data=dict(Playlist_Id=item['id'],
                    Title=item['snippet']['title'],
                    Channel_Id=item['snippet']['channelId'],
                    Channel_Name=item['snippet']['channelTitle'],
                    PublishedAt=item['snippet']['publishedAt'],
                    Video_Count=item['contentDetails']['itemCount'])
            All_data.append(data)
        next_page_Token=response.get('nextPageToken')
        if next_page_Token is None:
            break
    return All_data


#upload to mongodb

client=pymongo.MongoClient("mongodb+srv://vp****2001:rrs207074@cluster0.tyumaoy.mongodb.net/?retryWrites=true&w=majority")
db=client["Youtube_data"]


def channel_details(channel_id):
     ch_details=get_channel_info(channel_id)
     pl_details=get_playlist_details(channel_id)
     vi_ids=get_video_ids(channel_id)
     vi_details=get_video_info(vi_ids)
     com_details=get_comment_info(vi_ids)

     coll1=db["channel_details"]
     coll1.insert_one({"channel_information":ch_details, "playlist_information":pl_details,
                       "video_information":vi_details,"comment_information":com_details})
     
     return "uploaded successfully"

#table creation for channels,playlists,videos,comments
def channels_table():
    mydb=psycopg2.connect(host="localhost",
                        user="postgres",
                        password="V****2001",
                        database="youtube_data",
                        port="5432")

    cursor=mydb.cursor()

    drop_query='''drop table if exists channels'''
    cursor.execute(drop_query)
    mydb.commit()

    try:
        create_query='''create table if not exists channels(Channel_Name varchar(100),
                                                            Channel_Id varchar(80) primary key,
                                                            Subscribers bigint,
                                                            Views bigint,
                                                            Total_Videos int,
                                                            Channel_Description text,
                                                            Playlist_Id varchar(80))'''
        cursor.execute(create_query)
        mydb.commit()

    except:
        print("Channels tables already created")


    ch_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({},{"_id":0,"channel_information":1}):
         ch_list.append(ch_data["channel_information"])
    df=pd.DataFrame(ch_list)

    for index,row in df.iterrows():
        insert_query='''insert into channels(Channel_Name,
                                            Channel_Id,
                                            Subscribers,
                                            Views,
                                            Total_Videos,
                                            Channel_Description,
                                            Playlist_Id)
                                        
                                            values(%s,%s,%s,%s,%s,%s,%s)'''
    
        values=(row['Channel_Name'],
                row['Channel_Id'],
                row['Subscribers'],
                row['Views'],
                row['Total_Videos'],
                row['Channel_Description'],
                row['Playlist_Id'])
    
        try:
            cursor.execute(insert_query,values)
            mydb.commit()
        except:
            print("Channel values are already inserted")
     

def playlists_table():
    mydb=psycopg2.connect(host="localhost",
                        user="postgres",
                        password="V****2001",
                        database="youtube_data",
                        port="5432")

    cursor=mydb.cursor()

    drop_query='''drop table if exists playlists'''
    cursor.execute(drop_query)
    mydb.commit()

    create_query='''create table if not exists playlists(Playlist_Id varchar(100) primary key,
                                                    Title varchar(80),
                                                    Channel_Id varchar(100),
                                                    Channel_Name varchar(100),
                                                    PublishedAt timestamp,
                                                    Video_Count int)'''
    cursor.execute(create_query)
    mydb.commit()

    pl_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for pl_data in coll1.find({},{"_id":0,"playlist_information":1}):
        for i in range(len(pl_data["playlist_information"])):
            pl_list.append(pl_data["playlist_information"][i])
    df1=pd.DataFrame(pl_list)
    

    for index,row in df1.iterrows():
        insert_query='''insert into playlists(Playlist_Id ,
                                        Title,
                                        Channel_Id ,
                                        Channel_Name,
                                        PublishedAt,
                                        Video_Count)
                                        
                                        values(%s,%s,%s,%s,%s,%s)'''
   
        values=(row['Playlist_Id'],
                row['Title'],
                row['Channel_Id'],
                row['Channel_Name'],
                row['PublishedAt'],
                row['Video_Count']
                )
    
    cursor.execute(insert_query,values)
    mydb.commit()


def videos_table():
    mydb=psycopg2.connect(host="localhost",
                        user="postgres",
                        password="Vpriya2001",
                        database="youtube_data",
                        port="5432")

    cursor=mydb.cursor()

    drop_query='''drop table if exists videos'''
    cursor.execute(drop_query)
    mydb.commit()

    create_query='''create table if not exists videos(Channel_Name varchar(100),
                        Channel_Id varchar(100),
                        Video_Id varchar(30) primary key,
                        Title varchar(150),
                        Tags text,
                        Thumbnail varchar(200),
                        Description text,
                        Published_date timestamp,
                        Duration interval,
                        Views bigint,
                        Likes bigint,
                        Comments int,
                        Favourite_Count int,
                        Definition varchar(10),
                        Caption_status varchar(50)
                        )'''
    cursor.execute(create_query)
    mydb.commit()


    vi_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for vi_data in coll1.find({},{"_id":0,"video_information":1}):
        for i in range(len(vi_data["video_information"])):
            vi_list.append(vi_data["video_information"][i])
        df2=pd.DataFrame(vi_list)

    for index,row in df2.iterrows():
            insert_query='''insert into videos(Channel_Name,
                                        Channel_Id,
                                        Video_Id,
                                        Title,
                                        Tags,
                                        Thumbnail,
                                        Description,
                                        Published_date,
                                        Duration,
                                        Views,
                                        Likes,
                                        Comments,
                                        Favourite_Count,
                                        Definition,
                                        Caption_status)
                                        
                                        values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'''

            values=(row['Channel_Name'],
                row['Channel_Id'],
                row['Video_Id'],
                row['Title'],
                row['Tags'],
                row['Thumbnail'],
                row['Description'],
                row['Published_date'],
                row['Duration'],
                row['Views'],
                row['Likes'],
                row['Comments'],
                row['Favourite_Count'],
                row['Definition'],
                row['Caption_status']
                )

    cursor.execute(insert_query,values)
    mydb.commit()

def comments_table():
    mydb=psycopg2.connect(host="localhost",
                user="postgres",
                password="Vpriya2001",
                database="youtube_data",
                port="5432")

    cursor=mydb.cursor()

    drop_query='''drop table if exists comments'''
    cursor.execute(drop_query)
    mydb.commit()

    create_query='''create table if not exists comments(Comment_Id varchar(100) primary key,
                    Video_Id varchar(50),
                    Comment_Text text,
                    Comment_Author varchar(150),
                    Comment_Published timestamp
                    )'''

    cursor.execute(create_query)
    mydb.commit()

    com_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for com_data in coll1.find({},{"_id":0,"comment_information":1}):
       for i in range(len(com_data["comment_information"])):
            com_list.append(com_data["comment_information"][i])
       df3=pd.DataFrame(com_list)


    cursor=mydb.cursor()
    for index,row in df3.iterrows():
        insert_query='''insert into comments(Comment_Id,
                                    Video_Id,
                                    Comment_Text,
                                    Comment_Author,
                                    Comment_Published
                                    )
                                    
                                    values(%s,%s,%s,%s,%s)'''
        
    values=(row['Comment_Id'],
        row['Video_Id'],
        row['Comment_Text'],
        row['Comment_Author'],
        row['Comment_Published']
        )

    cursor.execute(insert_query,values)
    mydb.commit()


def tables():
    channels_table()
    playlists_table()
    videos_table()
    comments_table()

    return "tables created sucessfully"

def show_channels_table():
    ch_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({},{"_id":0,"channel_information":1}):
        ch_list.append(ch_data["channel_information"])
    df=st.dataframe(ch_list)
    
    return df

def show_playlists_table():
    pl_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for pl_data in coll1.find({},{"_id":0,"playlist_information":1}):
        for i in range(len(pl_data["playlist_information"])):
            pl_list.append(pl_data["playlist_information"][i])
    df1=st.dataframe(pl_list)
    
    return df1

def show_videos_table():
    vi_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for vi_data in coll1.find({},{"_id":0,"video_information":1}):
        for i in range(len(vi_data["video_information"])):
            vi_list.append(vi_data["video_information"][i])
    df2=st.dataframe(vi_list)

    return df2

    
def show_comments_table():
    com_list=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for com_data in coll1.find({},{"_id":0,"comment_information":1}):
        for i in range(len(com_data["comment_information"])):
            com_list.append(com_data["comment_information"][i])
    df3=st.dataframe(com_list)

    return df3
    

# streamlit part
with st.sidebar:
    st.title(":red[YOUTUBE DATA HARVESTING AND WAREHOUSING]")
    st.header("Skills take away")
    st.caption("python scripting")
    st.caption("Data collection")
    st.caption("Mongodb")
    st.caption("API integration")
    st.caption("Data management using MongoDB and SQL")

channel_id=st.text_input("Enter the channel ID")

if st.button("collect and store data"):
    ch_ids=[]
    db=client["Youtube_data"]
    coll1=db["channel_details"]
    for ch_data in coll1.find({},{"id":0},{"channel_information":1}):
        ch_ids.append(ch_data["channel_information"]["Channel_Id"])

    if  channel_id in ch_ids:
        st.success("Channel details of the given channel id already exists")
    else:
        insert=channel_details(channel_id)
        st.success(insert)

if st.button("migrate to sql"):
    Table= tables()
    st.success(Table)

show_table=st.radio("SELECT TABLE FOR VIEW",("CHANNELS","PLAYLISTS","VIDEOS","COMMENTS"))

if show_table=="CHANNELS":
    show_channels_table()

elif show_table=="PLAYLISTS":
    show_playlists_table()

elif show_table=="VIDEOS":
    show_videos_table()
    
elif show_table=="COMMENTS":
    show_comments_table()


#sql connection
mydb=psycopg2.connect(host="localhost",
                    user="postgres",
                    password="V****2001",
                    database="youtube_data",
                    port="5432")

cursor=mydb.cursor()

question=st.selectbox("select your question",("1. All the videos and channel name",
                                              "2. channels with most number of videos",
                                              "3. 10 Most viewed videos",
                                              "4. Comments in each videos",
                                              "5. Videos with highest likes",
                                              "6. Likes of all videos",
                                              "7. Views of each channel",
                                              "8. Videos publised in the year of 2022",
                                              "9. Average duration of all videos in each channel",
                                              "10. Videos with highest number of comments"))


